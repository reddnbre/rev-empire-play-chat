// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { cookieStorage } from '@/lib/cookieStorage';

const SUPABASE_URL = "https://oysutzfurpgictdgxuzj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im95c3V0emZ1cnBnaWN0ZGd4dXpqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgyMzU4MjIsImV4cCI6MjA3MzgxMTgyMn0.n7mC5MaOQOD9UTJuugWnkEq4Nu-EMHOluAXYQnOwrQg";

// Check if user has consented to cookies
const getCookieConsent = (): boolean => {
  if (typeof window === 'undefined') return false;
  const consent = localStorage.getItem('cookie-consent');
  return consent === 'true';
};

// Dynamic storage based on cookie consent
const getStorage = () => {
  return getCookieConsent() ? cookieStorage : localStorage;
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: getStorage(),
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Function to update storage type when consent changes
export const updateSupabaseStorage = (useCookies: boolean) => {
  // Update the storage in the auth client
  supabase.auth.admin.listUsers(); // This forces a refresh of the auth client
};